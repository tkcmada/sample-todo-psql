name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: todo_user
          POSTGRES_PASSWORD: todo_password
          POSTGRES_DB: todo_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run type check
      run: npx tsc --noEmit

    - name: Setup test environment
      run: |
        echo "DATABASE_URL=postgresql://todo_user:todo_password@localhost:5432/todo_db" > .env.local

    - name: Run database migrations
      run: npm run db:migrate

    - name: Run unit tests
      run: npm run test

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20'
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build application
      run: npm run build

    - name: Check build artifacts
      run: |
        if [ ! -d ".next" ]; then
          echo "Build failed - .next directory not found"
          exit 1
        fi
        echo "✅ Build completed successfully"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --omit=dev --audit-level=moderate

    - name: Check for vulnerabilities
      run: |
        npm audit --omit=dev --audit-level=high --json > audit-results.json || true
        if [ -s audit-results.json ]; then
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "⚠️ High or critical vulnerabilities found:"
            echo "High: $HIGH_VULNS, Critical: $CRITICAL_VULNS"
            echo "Please review and update dependencies"
            exit 1
          fi
        fi
        echo "✅ No high or critical vulnerabilities found"

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always()

    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"
        echo "- Tests: ✅"
        echo "- Security: ✅"
        echo "- Build: ✅"

    - name: Notify failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "❌ Some checks failed:"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security-scan.result }}"
        exit 1